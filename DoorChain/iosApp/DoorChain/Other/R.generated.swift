//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.clr` struct is generated, and contains static references to 1 color palettes.
  /// NOTE: R.clr is deprecated and will be removed in a future R.swift version.
  struct clr {
    /// This `R.clr.doorChain` struct is generated, and contains static references to 11 colors.
    struct doorChain {
      /// <span style='background-color: #353535; color: #CACACA; padding: 1px 3px;'>#353535</span> blackMain
      static let blackMain = Rswift.ColorPaletteItemResource(name: "blackMain", red: 0.2078431373, green: 0.2078431373, blue: 0.2078431373, alpha: 1.0)
      /// <span style='background-color: #5087F6; color: #AF7809; padding: 1px 3px;'>#5087F6</span> blueTabs
      static let blueTabs = Rswift.ColorPaletteItemResource(name: "blueTabs", red: 0.3137254902, green: 0.5294117647, blue: 0.9647058824, alpha: 1.0)
      /// <span style='background-color: #8E8E93; color: #71716C; padding: 1px 3px;'>#8E8E93</span> grayTabsTitles
      static let grayTabsTitles = Rswift.ColorPaletteItemResource(name: "grayTabsTitles", red: 0.5568627451, green: 0.5568627451, blue: 0.5764705882, alpha: 1.0)
      /// <span style='background-color: #C6C6C6; color: #393939; padding: 1px 3px;'>#C6C6C6</span> grayTabsImages
      static let grayTabsImages = Rswift.ColorPaletteItemResource(name: "grayTabsImages", red: 0.7764705882, green: 0.7764705882, blue: 0.7764705882, alpha: 1.0)
      /// <span style='background-color: #E1E1E1; color: #1E1E1E; padding: 1px 3px;'>#E1E1E1</span> grayBorderCkeckBox
      static let grayBorderCkeckBox = Rswift.ColorPaletteItemResource(name: "grayBorderCkeckBox", red: 0.8823529412, green: 0.8823529412, blue: 0.8823529412, alpha: 1.0)
      /// <span style='background-color: #EB4B3D; color: #14B4C2; padding: 1px 3px;'>#EB4B3D</span> redMain
      static let redMain = Rswift.ColorPaletteItemResource(name: "redMain", red: 0.9215686275, green: 0.2941176471, blue: 0.2392156863, alpha: 1.0)
      /// <span style='background-color: #EBEBEB; color: #141414; padding: 1px 3px;'>#EBEBEB</span> grayNotEvailable
      static let grayNotEvailable = Rswift.ColorPaletteItemResource(name: "grayNotEvailable", red: 0.9215686275, green: 0.9215686275, blue: 0.9215686275, alpha: 1.0)
      /// <span style='background-color: #F0F0F0CC; color: #0F0F0F; padding: 1px 3px;'>#F0F0F0CC</span> grayBorders
      static let grayBorders = Rswift.ColorPaletteItemResource(name: "grayBorders", red: 0.9411764706, green: 0.9411764706, blue: 0.9411764706, alpha: 0.8)
      /// <span style='background-color: #F3F3F3; color: #0C0C0C; padding: 1px 3px;'>#F3F3F3</span> graySelected
      static let graySelected = Rswift.ColorPaletteItemResource(name: "graySelected", red: 0.9529411765, green: 0.9529411765, blue: 0.9529411765, alpha: 1.0)
      /// <span style='background-color: #F7F7F7; color: #080808; padding: 1px 3px;'>#F7F7F7</span> graySeparators
      static let graySeparators = Rswift.ColorPaletteItemResource(name: "graySeparators", red: 0.968627451, green: 0.968627451, blue: 0.968627451, alpha: 1.0)
      /// <span style='background-color: #FCDF5F; color: #0320A0; padding: 1px 3px;'>#FCDF5F</span> yellowMain
      static let yellowMain = Rswift.ColorPaletteItemResource(name: "yellowMain", red: 0.9882352941, green: 0.8745098039, blue: 0.3725490196, alpha: 1.0)
      
      /// <span style='background-color: #353535; color: #CACACA; padding: 1px 3px;'>#353535</span> blackMain
      /// 
      /// UIColor(red: 0.2078431373, green: 0.2078431373, blue: 0.2078431373, alpha: 1.0)
      static func blackMain(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.2078431373, green: 0.2078431373, blue: 0.2078431373, alpha: 1.0)
      }
      
      /// <span style='background-color: #5087F6; color: #AF7809; padding: 1px 3px;'>#5087F6</span> blueTabs
      /// 
      /// UIColor(red: 0.3137254902, green: 0.5294117647, blue: 0.9647058824, alpha: 1.0)
      static func blueTabs(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.3137254902, green: 0.5294117647, blue: 0.9647058824, alpha: 1.0)
      }
      
      /// <span style='background-color: #8E8E93; color: #71716C; padding: 1px 3px;'>#8E8E93</span> grayTabsTitles
      /// 
      /// UIColor(red: 0.5568627451, green: 0.5568627451, blue: 0.5764705882, alpha: 1.0)
      static func grayTabsTitles(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.5568627451, green: 0.5568627451, blue: 0.5764705882, alpha: 1.0)
      }
      
      /// <span style='background-color: #C6C6C6; color: #393939; padding: 1px 3px;'>#C6C6C6</span> grayTabsImages
      /// 
      /// UIColor(red: 0.7764705882, green: 0.7764705882, blue: 0.7764705882, alpha: 1.0)
      static func grayTabsImages(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.7764705882, green: 0.7764705882, blue: 0.7764705882, alpha: 1.0)
      }
      
      /// <span style='background-color: #E1E1E1; color: #1E1E1E; padding: 1px 3px;'>#E1E1E1</span> grayBorderCkeckBox
      /// 
      /// UIColor(red: 0.8823529412, green: 0.8823529412, blue: 0.8823529412, alpha: 1.0)
      static func grayBorderCkeckBox(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.8823529412, green: 0.8823529412, blue: 0.8823529412, alpha: 1.0)
      }
      
      /// <span style='background-color: #EB4B3D; color: #14B4C2; padding: 1px 3px;'>#EB4B3D</span> redMain
      /// 
      /// UIColor(red: 0.9215686275, green: 0.2941176471, blue: 0.2392156863, alpha: 1.0)
      static func redMain(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9215686275, green: 0.2941176471, blue: 0.2392156863, alpha: 1.0)
      }
      
      /// <span style='background-color: #EBEBEB; color: #141414; padding: 1px 3px;'>#EBEBEB</span> grayNotEvailable
      /// 
      /// UIColor(red: 0.9215686275, green: 0.9215686275, blue: 0.9215686275, alpha: 1.0)
      static func grayNotEvailable(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9215686275, green: 0.9215686275, blue: 0.9215686275, alpha: 1.0)
      }
      
      /// <span style='background-color: #F0F0F0CC; color: #0F0F0F; padding: 1px 3px;'>#F0F0F0CC</span> grayBorders
      /// 
      /// UIColor(red: 0.9411764706, green: 0.9411764706, blue: 0.9411764706, alpha: 0.8)
      static func grayBorders(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9411764706, green: 0.9411764706, blue: 0.9411764706, alpha: 0.8)
      }
      
      /// <span style='background-color: #F3F3F3; color: #0C0C0C; padding: 1px 3px;'>#F3F3F3</span> graySelected
      /// 
      /// UIColor(red: 0.9529411765, green: 0.9529411765, blue: 0.9529411765, alpha: 1.0)
      static func graySelected(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9529411765, green: 0.9529411765, blue: 0.9529411765, alpha: 1.0)
      }
      
      /// <span style='background-color: #F7F7F7; color: #080808; padding: 1px 3px;'>#F7F7F7</span> graySeparators
      /// 
      /// UIColor(red: 0.968627451, green: 0.968627451, blue: 0.968627451, alpha: 1.0)
      static func graySeparators(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.968627451, green: 0.968627451, blue: 0.968627451, alpha: 1.0)
      }
      
      /// <span style='background-color: #FCDF5F; color: #0320A0; padding: 1px 3px;'>#FCDF5F</span> yellowMain
      /// 
      /// UIColor(red: 0.9882352941, green: 0.8745098039, blue: 0.3725490196, alpha: 1.0)
      static func yellowMain(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9882352941, green: 0.8745098039, blue: 0.3725490196, alpha: 1.0)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 13 files.
  struct file {
    /// Resource file `DoorChain.clr`.
    static let doorChainClr = Rswift.FileResource(bundle: R.hostingBundle, name: "DoorChain", pathExtension: "clr")
    /// Resource file `geometria_bold.otf`.
    static let geometria_boldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_bold", pathExtension: "otf")
    /// Resource file `geometria_bold_italic.otf`.
    static let geometria_bold_italicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_bold_italic", pathExtension: "otf")
    /// Resource file `geometria_exta_black.otf`.
    static let geometria_exta_blackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_exta_black", pathExtension: "otf")
    /// Resource file `geometria_extra_black_italic.otf`.
    static let geometria_extra_black_italicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_extra_black_italic", pathExtension: "otf")
    /// Resource file `geometria_extra_light.otf`.
    static let geometria_extra_lightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_extra_light", pathExtension: "otf")
    /// Resource file `geometria_extra_light_italic.otf`.
    static let geometria_extra_light_italicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_extra_light_italic", pathExtension: "otf")
    /// Resource file `geometria_heavy.otf`.
    static let geometria_heavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_heavy", pathExtension: "otf")
    /// Resource file `geometria_heavy_italic.otf`.
    static let geometria_heavy_italicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_heavy_italic", pathExtension: "otf")
    /// Resource file `geometria_light.otf`.
    static let geometria_lightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_light", pathExtension: "otf")
    /// Resource file `geometria_medium.otf`.
    static let geometria_mediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_medium", pathExtension: "otf")
    /// Resource file `geometria_normal.otf`.
    static let geometria_normalOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "geometria_normal", pathExtension: "otf")
    /// Resource file `myriad_pro_regular.otf`.
    static let myriad_pro_regularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "myriad_pro_regular", pathExtension: "otf")
    
    /// `bundle.url(forResource: "DoorChain", withExtension: "clr")`
    static func doorChainClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.doorChainClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_bold", withExtension: "otf")`
    static func geometria_boldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_boldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_bold_italic", withExtension: "otf")`
    static func geometria_bold_italicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_bold_italicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_exta_black", withExtension: "otf")`
    static func geometria_exta_blackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_exta_blackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_extra_black_italic", withExtension: "otf")`
    static func geometria_extra_black_italicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_extra_black_italicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_extra_light", withExtension: "otf")`
    static func geometria_extra_lightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_extra_lightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_extra_light_italic", withExtension: "otf")`
    static func geometria_extra_light_italicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_extra_light_italicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_heavy", withExtension: "otf")`
    static func geometria_heavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_heavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_heavy_italic", withExtension: "otf")`
    static func geometria_heavy_italicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_heavy_italicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_light", withExtension: "otf")`
    static func geometria_lightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_lightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_medium", withExtension: "otf")`
    static func geometria_mediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_mediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "geometria_normal", withExtension: "otf")`
    static func geometria_normalOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geometria_normalOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "myriad_pro_regular", withExtension: "otf")`
    static func myriad_pro_regularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.myriad_pro_regularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `Geometria-BoldItalic`.
    static let geometriaBoldItalic = Rswift.FontResource(fontName: "Geometria-BoldItalic")
    /// Font `Geometria-Bold`.
    static let geometriaBold = Rswift.FontResource(fontName: "Geometria-Bold")
    /// Font `Geometria-ExtraBoldItalic`.
    static let geometriaExtraBoldItalic = Rswift.FontResource(fontName: "Geometria-ExtraBoldItalic")
    /// Font `Geometria-ExtraBold`.
    static let geometriaExtraBold = Rswift.FontResource(fontName: "Geometria-ExtraBold")
    /// Font `Geometria-ExtraLightItalic`.
    static let geometriaExtraLightItalic = Rswift.FontResource(fontName: "Geometria-ExtraLightItalic")
    /// Font `Geometria-ExtraLight`.
    static let geometriaExtraLight = Rswift.FontResource(fontName: "Geometria-ExtraLight")
    /// Font `Geometria-HeavyItalic`.
    static let geometriaHeavyItalic = Rswift.FontResource(fontName: "Geometria-HeavyItalic")
    /// Font `Geometria-Heavy`.
    static let geometriaHeavy = Rswift.FontResource(fontName: "Geometria-Heavy")
    /// Font `Geometria-Light`.
    static let geometriaLight = Rswift.FontResource(fontName: "Geometria-Light")
    /// Font `Geometria-Medium`.
    static let geometriaMedium = Rswift.FontResource(fontName: "Geometria-Medium")
    /// Font `Geometria`.
    static let geometria = Rswift.FontResource(fontName: "Geometria")
    /// Font `MyriadPro-Regular`.
    static let myriadProRegular = Rswift.FontResource(fontName: "MyriadPro-Regular")
    
    /// `UIFont(name: "Geometria", size: ...)`
    static func geometria(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometria, size: size)
    }
    
    /// `UIFont(name: "Geometria-Bold", size: ...)`
    static func geometriaBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaBold, size: size)
    }
    
    /// `UIFont(name: "Geometria-BoldItalic", size: ...)`
    static func geometriaBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Geometria-ExtraBold", size: ...)`
    static func geometriaExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaExtraBold, size: size)
    }
    
    /// `UIFont(name: "Geometria-ExtraBoldItalic", size: ...)`
    static func geometriaExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaExtraBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Geometria-ExtraLight", size: ...)`
    static func geometriaExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaExtraLight, size: size)
    }
    
    /// `UIFont(name: "Geometria-ExtraLightItalic", size: ...)`
    static func geometriaExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaExtraLightItalic, size: size)
    }
    
    /// `UIFont(name: "Geometria-Heavy", size: ...)`
    static func geometriaHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaHeavy, size: size)
    }
    
    /// `UIFont(name: "Geometria-HeavyItalic", size: ...)`
    static func geometriaHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaHeavyItalic, size: size)
    }
    
    /// `UIFont(name: "Geometria-Light", size: ...)`
    static func geometriaLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaLight, size: size)
    }
    
    /// `UIFont(name: "Geometria-Medium", size: ...)`
    static func geometriaMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geometriaMedium, size: size)
    }
    
    /// `UIFont(name: "MyriadPro-Regular", size: ...)`
    static func myriadProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: myriadProRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.geometriaHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-HeavyItalic' could not be loaded, is 'geometria_heavy_italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometriaBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-Bold' could not be loaded, is 'geometria_bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.myriadProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MyriadPro-Regular' could not be loaded, is 'myriad_pro_regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometriaExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-ExtraBold' could not be loaded, is 'geometria_exta_black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometriaBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-BoldItalic' could not be loaded, is 'geometria_bold_italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometria(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria' could not be loaded, is 'geometria_normal.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometriaExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-ExtraLight' could not be loaded, is 'geometria_extra_light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometriaExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-ExtraLightItalic' could not be loaded, is 'geometria_extra_light_italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometriaLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-Light' could not be loaded, is 'geometria_light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometriaHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-Heavy' could not be loaded, is 'geometria_heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometriaMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-Medium' could not be loaded, is 'geometria_medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geometriaExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Geometria-ExtraBoldItalic' could not be loaded, is 'geometria_extra_black_italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `CustomTextFieldWithImage`.
    static let customTextFieldWithImage = _R.nib._CustomTextFieldWithImage()
    /// Nib `CustomTextField`.
    static let customTextField = _R.nib._CustomTextField()
    
    /// `UINib(name: "CustomTextField", in: bundle)`
    static func customTextField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customTextField)
    }
    
    /// `UINib(name: "CustomTextFieldWithImage", in: bundle)`
    static func customTextFieldWithImage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customTextFieldWithImage)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DoorsTableViewCell`.
    static let doorsTableViewCell: Rswift.ReuseIdentifier<DoorsTableViewCell> = Rswift.ReuseIdentifier(identifier: "DoorsTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `Doors`.
    static let doors = _R.storyboard.doors()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Root`.
    static let root = _R.storyboard.root()
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "Doors", bundle: ...)`
    static func doors(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.doors)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Root", bundle: ...)`
    static func root(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.root)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localization` struct is generated, and contains static references to 0 localization keys.
    struct localization {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _CustomTextField: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomTextField"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CustomTextField? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomTextField
      }
      
      fileprivate init() {}
    }
    
    struct _CustomTextFieldWithImage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomTextFieldWithImage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CustomTextFieldWithImage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomTextFieldWithImage
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try root.validate()
      try auth.validate()
    }
    
    struct auth: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Auth"
      let registrationViewController = StoryboardViewControllerResource<RegistrationViewController>(identifier: "RegistrationViewController")
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func registrationViewController(_: Void = ()) -> RegistrationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registrationViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.auth().registrationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registrationViewController' could not be loaded from storyboard 'Auth' as 'RegistrationViewController'.") }
        if _R.storyboard.auth().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Auth' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct doors: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = DoorsViewController
      
      let bundle = R.hostingBundle
      let name = "Doors"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct root: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootViewController
      
      let bundle = R.hostingBundle
      let name = "Root"
      let rootViewController = StoryboardViewControllerResource<RootViewController>(identifier: "RootViewController")
      
      func rootViewController(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.root().rootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootViewController' could not be loaded from storyboard 'Root' as 'RootViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
